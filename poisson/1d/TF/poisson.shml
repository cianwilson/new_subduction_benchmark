<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">A simple example setting up the Poisson equation in 1D.</string_value>
  </description>
  <simulations>
    <simulation name="Poisson">
      <input_file>
        <string_value type="filename" lines="1">poisson.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="p">
          <values>
            <string_value lines="1">1 2</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::Poisson/field::T/type/rank/element/degree", int(p))</string_value>
          </update>
        </parameter>
        <parameter name="nelements">
          <values>
            <string_value lines="1">10 20 40 80 160 320</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/geometry/mesh::Mesh/source/number_cells", int(nelements))</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="l2error">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser
stat = parser("poisson.stat")
l2error = stat["Poisson"]["L2ErrorSquared"]["functional_value"][-1]**0.5</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="convergence">
      <string_value type="code" language="python3" lines="20">import os
havedisplay = False
if os.environ.get('PLOT', 0):
  exitval = os.system('python3 -c "import matplotlib.pyplot as plt; plt.figure()"')
  havedisplay = (exitval == 0) and "DISPLAY" in os.environ

import matplotlib
if havedisplay:
  matplotlib.use('GTK3Agg')
else:
  matplotlib.use('Agg')
import matplotlib.pyplot as pl
import numpy as np
import itertools

pl.figure()

# get and print the  parameters dictionary in the nested list
params = l2error.parameters
nelements = params['nelements']
ps = params['p']

test_passes = True
for p in ps:
  key = {'p':p}
  # convert nested-list error_l2  to a flattened numpy array
  errors_l2_a = np.array(l2error[key])

  # get the mesh spacing from the parameter nelements (ugly but works)
  hs = 1./np.array([int(nc) for nc in nelements])/float(p)  

  with open('1d_poisson_convergence_p{}.csv'.format(p), 'w') as f:
    np.savetxt(f, np.c_[[float(nc) for nc in nelements], hs, errors_l2_a], delimiter=',', header='nelements, hs, l2errs')

  # calculate best-fit slope on log-log plot
  fit = np.polyfit(np.log(hs),np.log(errors_l2_a),1)
  print("***********  order of accuracy p={}, order={:.2f}".format(p,fit[0]))

  pl.loglog(hs,errors_l2_a,'o-',label='p={}, order={:.2f}'.format(p,fit[0]))
  
  test_passes = test_passes and fit[0] &gt; float(p) + 0.9

pl.xlabel('h')
pl.ylabel('||e||_2')
pl.grid()
pl.title('Convergence')
pl.legend()
pl.savefig('poisson_convergence.pdf')
print("***********  convergence figure in poisson_convergence.pdf")

# check convergence
assert(test_passes)</string_value>
    </test>
    <test name="display">
      <string_value type="code" language="python3" lines="20">import os
havedisplay = False
if os.environ.get('PLOT', 0):
  exitval = os.system('python3 -c "import matplotlib.pyplot as plt; plt.figure()"')
  havedisplay = (exitval == 0) and "DISPLAY" in os.environ

import matplotlib
import itertools
if havedisplay:
  matplotlib.use('GTK3Agg')
  import matplotlib.pyplot as plt
  plt.show()</string_value>
    </test>
  </tests>
</harness_options>
