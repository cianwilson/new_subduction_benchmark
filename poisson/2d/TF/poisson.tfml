<?xml version='1.0' encoding='utf-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="UnitSquare">
        <number_cells>
          <integer_value rank="1" dim1="2" shape="2">10 10</integer_value>
        </number_cells>
        <diagonal>
          <string_value lines="1">right</string_value>
        </diagonal>
        <cell>
          <string_value lines="1">triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">poisson</string_value>
    </output_base_name>
    <visualization>
      <element name="P1">
        <family>
          <string_value lines="1">CG</string_value>
        </family>
        <degree>
          <integer_value rank="0">1</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods/>
    <detectors/>
  </io>
  <global_parameters/>
  <system name="Poisson">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">u</string_value>
    </ufl_symbol>
    <field name="T">
      <ufl_symbol name="global">
        <string_value lines="1">T</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="UserDefined">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
          <boundary_condition name="Left">
            <boundary_ids>
              <integer_value rank="1" shape="2">1 3</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type name="Dirichlet" type="boundary_condition">
                <python rank="0">
                  <string_value type="code" language="python3" lines="20">def val(x):
  from math import exp
  return exp(x[0] + x[1]/2.)</string_value>
                </python>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Solver">
      <type name="Picard">
        <form name="Bilinear" rank="1">
          <string_value type="code" language="python3" lines="20">S = inner(grad(T_t), grad(T_a))*dx</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">S</string_value>
          </ufl_symbol>
        </form>
        <form name="Linear" rank="0">
          <string_value type="code" language="python3" lines="20"># Get the coordinates
x = SpatialCoordinate(u_e.cell())
# Define the Neumann boundary condition function
gN = as_vector((exp(x[0] + x[1]/2.), 0.5*exp(x[0] + x[1]/2.)))
# Define the right hand side function, rhsf
rhsf = -5./4.*exp(x[0] + x[1]/2.)

# Get the unit vector normal to the facets
n = FacetNormal(u_e.cell())

f = T_t*rhsf*dx + T_t*inner(gN, n)*ds</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">f</string_value>
          </ufl_symbol>
        </form>
        <form name="Residual" rank="0">
          <string_value type="code" language="python3" lines="20">r = action(S, u_i) - f</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form_representation name="quadrature"/>
        <quadrature_rule name="default"/>
        <relative_error>
          <real_value rank="0">1.e-7</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-16</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors/>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="mumps"/>
          </preconditioner>
          <monitors/>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
    <functional name="L2ErrorSquared">
      <string_value type="code" language="python3" lines="20">x  = SpatialCoordinate(u_e.cell())
Te = exp(x[0] + x[1]/2.)
l2err = (T_i - Te)*(T_i - Te)*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">l2err</string_value>
      </ufl_symbol>
      <form_representation name="uflacs"/>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
  </system>
</terraferma_options>
