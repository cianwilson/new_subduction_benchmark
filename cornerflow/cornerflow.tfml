<?xml version='1.0' encoding='utf-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="UnitSquare">
        <number_cells>
          <integer_value rank="1" dim1="2" shape="2">20 20</integer_value>
        </number_cells>
        <diagonal>
          <string_value lines="1">right/left</string_value>
        </diagonal>
        <cell>
          <string_value lines="1">triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">cornerflow</string_value>
    </output_base_name>
    <visualization>
      <element name="P1">
        <family>
          <string_value lines="1">CG</string_value>
        </family>
        <degree>
          <integer_value rank="0">1</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods/>
    <detectors/>
  </io>
  <global_parameters>
    <ufl>
      <string_value type="code" language="python3" lines="20">x  = SpatialCoordinate(up_e.cell())
Te = -0.5*x[0]**2 + x[0]
theta = atan_2(x[1], x[0])
radius = (x[0]**2 + x[1]**2)**0.5
Ue = -U
theta0 = 0.5*pi
f = Ue*(-theta0**2*sin(theta) + theta0*theta*sin(theta) \
       - sin(theta0)*cos(theta0)*theta*sin(theta) \
       + sin(theta0)**2*theta*cos(theta)) \
       /(theta0**2 - sin(theta0)**2)
dfdt = Ue*(-theta0**2*cos(theta) + theta0*sin(theta) \
          + theta0*theta*cos(theta) - sin(theta0)*cos(theta0)*sin(theta) \
          - sin(theta0)*cos(theta0)*theta*cos(theta) \
          + sin(theta0)**2*cos(theta) - sin(theta0)**2*theta*sin(theta)) \
       /(theta0**2 - sin(theta0)**2)
psie = radius*f
vre = dfdt
vte = -f
ve = as_vector([vre*cos(theta) - vte*sin(theta),
                vre*sin(theta) + vte*cos(theta)])</string_value>
    </ufl>
  </global_parameters>
  <system name="Stokes">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">us</string_value>
    </ufl_symbol>
    <field name="Velocity">
      <ufl_symbol name="global">
        <string_value lines="1">v</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Vector" rank="1">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <boundary_condition name="Left">
            <boundary_ids>
              <integer_value rank="1" shape="1">1</integer_value>
            </boundary_ids>
            <sub_components name="All">
              <type name="Dirichlet" type="boundary_condition">
                <constant name="dim">
                  <real_value rank="1" dim1="dim" shape="2">0.0 0.0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
          <boundary_condition name="BaseX">
            <boundary_ids>
              <integer_value rank="1" shape="1">3</integer_value>
            </boundary_ids>
            <sub_components name="X">
              <components>
                <integer_value rank="1" shape="1">0</integer_value>
              </components>
              <type name="Dirichlet" type="boundary_condition">
                <internal rank="0">
                  <algorithm name="Reference">
                    <coefficient name="ConvergenceSpeed"/>
                  </algorithm>
                </internal>
              </type>
            </sub_components>
          </boundary_condition>
          <boundary_condition name="BaseY">
            <boundary_ids>
              <integer_value rank="1" shape="1">3</integer_value>
            </boundary_ids>
            <sub_components name="Y">
              <components>
                <integer_value rank="1" shape="1">1</integer_value>
              </components>
              <type name="Dirichlet" type="boundary_condition">
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </type>
            </sub_components>
          </boundary_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <field name="Pressure">
      <ufl_symbol name="global">
        <string_value lines="1">p</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P1">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">1</integer_value>
            </degree>
          </element>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <coefficient name="ConvergenceSpeed">
      <ufl_symbol name="global">
        <string_value lines="1">U</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value name="WholeMesh" type="value">
            <constant>
              <real_value rank="0">1.0</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value type="code" language="python3" lines="20">#rv = sum([inner(grad(v_t[i]), grad(v_i[i])) for i in range(2)])*dx - div(v_t)*p_i*dx
#rv = inner(sym(grad(v_t)), sym(grad(v_i)))*dx - div(v_t)*p_i*dx
rv = inner(grad(v_t), grad(v_i))*dx - div(v_t)*p_i*dx
#rp = inner(grad(p_t), v_i)*dx
rp = -p_t*div(v_i)*dx

r = rv + rp</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value type="code" language="python3" lines="20">J = derivative(r, us_i, us_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">J</string_value>
          </ufl_symbol>
        </form>
        <form_representation name="uflacs"/>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="mumps"/>
          </preconditioner>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
    <functional name="L2ErrorSquared">
      <string_value type="code" language="python3" lines="20">x  = SpatialCoordinate(us_e.cell())
l2err = inner(v_i-ve, v_i-ve)*dx</string_value>
      <ufl_symbol name="functional">
        <string_value lines="1">l2err</string_value>
      </ufl_symbol>
      <form_representation name="uflacs"/>
      <quadrature_degree>
        <integer_value rank="0">6</integer_value>
      </quadrature_degree>
      <quadrature_rule name="default"/>
      <include_in_statistics/>
    </functional>
  </system>
  <system name="Projection">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">up</string_value>
    </ufl_symbol>
    <field name="ExactSolution">
      <ufl_symbol name="global">
        <string_value lines="1">vef</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Vector" rank="1">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <field name="Difference">
      <ufl_symbol name="global">
        <string_value lines="1">vdf</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Vector" rank="1">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value type="code" language="python3" lines="20">r = inner(vef_t, vef_i - ve)*dx
r += inner(vdf_t, vdf_i - (v_i - ve))*dx</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">r</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value type="code" language="python3" lines="20">J = derivative(r, up_i, up_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">J</string_value>
          </ufl_symbol>
        </form>
        <form_representation name="uflacs"/>
        <quadrature_degree>
          <integer_value rank="0">6</integer_value>
        </quadrature_degree>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="mumps"/>
          </preconditioner>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
  </system>
</terraferma_options>
